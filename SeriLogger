using Serilog;
using Serilog.Events;
using Serilog.Sinks.MSSqlServer;
using System;
using System.Collections.ObjectModel;
using System.Data;

namespace Logger
{
    public class SeriLogger
    {
        private static SeriLogger mInstance;
        private static ILogger _Logger { get; set; }
        private static readonly object padlock = new object();

        private static string LoggerType { get; set; }
        private string UserCode { get; set; }
        private string ApplicationName { get; set; }

        private SeriLogger() { }

        private SeriLogger(string type, string arg2, string appName)
        {
            LoggerType = type;
            UserCode = arg2;
            ApplicationName = appName;
        }
        public static SeriLogger Instance
        {
            get
            {
                if (mInstance == null)
                {
                    throw new Exception("Object not created");
                }
                InitializeLogger();
                return mInstance;
            }
        }

        public static void Create(string type, string userCode, string appName)
        {
            if (mInstance == null)
            {
                mInstance = new SeriLogger(type, userCode, appName);
            }
        }

        static void InitializeLogger()
        {
            var connStr = "Data Source=LAPTOP-B7TENUPP;Initial Catalog=Logger;Integrated Security=True;";
            if (_Logger == null)
            {
                if (LoggerType.ToUpper() == "DB")
                {
                    _Logger = new LoggerConfiguration()
                                .WriteTo.MSSqlServer(connStr, "DMECSLog", columnOptions: GetSqlColumnOptions())
                                .CreateLogger();
                }
                else
                {
                    _Logger = new LoggerConfiguration().
                        WriteTo.File("log.txt")
                        .CreateLogger();
                }
            }

        }

        private static ColumnOptions GetSqlColumnOptions()
        {
            var colOptions = new ColumnOptions();
            colOptions.Store.Remove(StandardColumn.MessageTemplate);

            colOptions.AdditionalDataColumns = new Collection<DataColumn>
            {
                new DataColumn{DataType = typeof(string), ColumnName = "UserCode"},
                new DataColumn{DataType = typeof(string), ColumnName = "AppName"},
                new DataColumn{DataType = typeof(string), ColumnName = "FileName"},
                new DataColumn{DataType = typeof(string), ColumnName = "FunctionName"}
            };
            colOptions.Properties.ExcludeAdditionalProperties = true;
            return colOptions;
        }


        public void Debug(string fileName, string functionName, string message)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Debug(message);
        }
        public void Information(string fileName, string functionName, string message)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Information(message);
        }
        public void Warning(string fileName, string functionName, string message)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Warning(message);
        }
        public void Fatal(string fileName, string functionName, Exception exception)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Fatal(exception, exception.Message);
        }
        public void Verbose(string fileName, string functionName, Exception exception)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Verbose(exception, exception.Message);
        }
        public void Error(string fileName, string functionName, Exception exception)
        {
            _Logger.ForContext("UserCode", UserCode)
                .ForContext("AppName", ApplicationName)
                .ForContext("FileName", fileName)
                .ForContext("FunctionName", functionName).Error(exception, exception.Message);
        }
    }
}
